--- /home/viet/PycharmProjects/pytorch_flappy_bird/src/deep_q_network.py
+++ /home/viet/PycharmProjects/pytorch_flappy_bird/src/deep_q_network.py
@@ -2,18 +2,22 @@
     def __init__(self):
         super(DeepQNetwork, self).__init__()
 
+        # self.conv1 = nn.Sequential(nn.Conv2d(4,32, kernel_size=8, stride=4), nn.BatchNorm2d(32))
+        # self.conv2 = nn.Sequential(nn.Conv2d(32,64, kernel_size=4, stride=2), nn.BatchNorm2d(64))
+        # self.conv3 = nn.Sequential(nn.Conv2d(64,64, kernel_size=3, stride=1), nn.BatchNorm2d(64))
         self.conv1 = nn.Sequential(nn.Conv2d(4, 32, kernel_size=8, stride=4), nn.ReLU(inplace=True))
         self.conv2 = nn.Sequential(nn.Conv2d(32, 64, kernel_size=4, stride=2), nn.ReLU(inplace=True))
         self.conv3 = nn.Sequential(nn.Conv2d(64, 64, kernel_size=3, stride=1), nn.ReLU(inplace=True))
-
-        self.fc1 = nn.Sequential(nn.Linear(7 * 7 * 64, 512), nn.ReLU(inplace=True))
+        # self.fc1 = nn.Linear(7*7*64, 512)
+        self.fc1 = nn.Sequential(nn.Linear(7*7*64, 512), nn.ReLU(inplace=True))
         self.fc2 = nn.Linear(512, 2)
         self._create_weights()
 
-    def _create_weights(self):
+    def _create_weights(self, mean=0.0, std=0.01):
         for m in self.modules():
             if isinstance(m, nn.Conv2d) or isinstance(m, nn.Linear):
-                nn.init.uniform_(m.weight, -0.01, 0.01)
+                # m.weight.data.normal_(mean, std)
+                nn.init.uniform(m.weight, -0.01, 0.01)
                 nn.init.constant_(m.bias, 0)
 
     def forward(self, input):
@@ -21,6 +25,7 @@
         output = self.conv2(output)
         output = self.conv3(output)
         output = output.view(output.size(0), -1)
+        # output = F.relu(self.fc1(output))
         output = self.fc1(output)
         output = self.fc2(output)
 